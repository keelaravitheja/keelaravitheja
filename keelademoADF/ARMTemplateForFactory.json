{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "keelademoADF"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"SQL Storage_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'SQL Storage'"
		},
		"SqlServer_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'SqlServer'"
		},
		"linkedservice_sqlserver_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'linkedservice_sqlserver'"
		},
		"linkedservicestoragedemo keela_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'linkedservicestoragedemo keela'"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"SqlServer_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-069SH83\\KEELA"
		},
		"SqlServer_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "Practice"
		},
		"SqlServer_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"SqlServer1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "@{linkedService().servername}"
		},
		"SqlServer1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbName}"
		},
		"SqlServer1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "@{linkedService().username}"
		},
		"SqlServer2_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-069SH83\\KEELA"
		},
		"SqlServer2_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbname}"
		},
		"SqlServer2_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "ka"
		},
		"Sqlkeyvalut_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://KV-TS-SQL.vault.azure.net/"
		},
		"linkedservice_sqlserver_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "DESKTOP-069SH83\\KEELA"
		},
		"linkedservice_sqlserver_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "@{linkedService().dbname}"
		},
		"linkedservice_sqlserver_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "sa"
		},
		"eventtrigger_properties_pipeline1_parameters_filepath": {
			"type": "string",
			"defaultValue": "triggerBody().filepath"
		},
		"eventtrigger_properties_pipeline1_parameters_filename": {
			"type": "string",
			"defaultValue": "triggerBody().filename"
		},
		"eventtrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/1268a189-3299-49db-a72f-4e9cd85d409a/resourceGroups/keela_Testenvironment/providers/Microsoft.Storage/storageAccounts/storagedemokeela"
		},
		"RestService1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pokeapi.co/api/v2/pokemon?offset=20&limit=20%22"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://adlskeelademo.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Aggregatedataflowpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "aggregatepipline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Totalempbydept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"Departments": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T19:17:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Totalempbydept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditinalSplit')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ConditionalSplit",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employeedataset": {},
									"HREmployees": {},
									"ITEmployees": {},
									"PayrollEmployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T16:03:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ConditionalSplit')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Copydata csv')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "Source",
								"value": "adfdemo/input/dbo.Company_Destination.txt"
							},
							{
								"name": "Destination",
								"value": "adfdemo/Output/"
							}
						],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "destination",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-01T18:33:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/destination')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFunion Pieline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DFunion",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFunion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ITemployees": {},
									"HREmployees": {},
									"PayrollEmployees": {},
									"unionallemploye": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T18:50:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFunion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Delete Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Delete Activity",
						"type": "Delete",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [
							{
								"name": "filesdeleted",
								"value": "all txt files in output folder of adfdemo container "
							}
						],
						"typeProperties": {
							"dataset": {
								"referenceName": "outputfolder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "linkedservicestoragedemo keela",
									"type": "LinkedServiceReference"
								},
								"path": "adfdemo"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"wildcardFileName": "*.txt",
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T04:32:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/outputfolder')]",
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedColumnPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DerivedColumn",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DerivedColumntransformtion",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Newcountrylist": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T17:37:53Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DerivedColumntransformtion')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Df-exists')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DFExsits",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"Department": {},
									"output": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T18:05:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DFExsits')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ExecuteFilterDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "executefilterpayrollpieline",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Filterpayrolemp",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"PayrollEmpdata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T18:39:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Filterpayrolemp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IfCondition')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(pipeline().parameters.CopytoOutput1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Copy data2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdatadatset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlocationDataset",
											"type": "DatasetReference",
											"parameters": {
												"OutputFolder": {
													"value": "@pipeline().parameters.output2folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdatadatset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "outputlocationDataset",
											"type": "DatasetReference",
											"parameters": {
												"OutputFolder": {
													"value": "@pipeline().parameters.output1folder",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CopytoOutput1": {
						"type": "string",
						"defaultValue": "true"
					},
					"output1folder": {
						"type": "string",
						"defaultValue": "output1"
					},
					"output2folder": {
						"type": "string",
						"defaultValue": "output2"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T11:01:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatadatset')]",
				"[concat(variables('factoryId'), '/datasets/outputlocationDataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinTrasformation pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Totalempbydept",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"Departments": {},
									"sink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T14:57:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Totalempbydept')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LookupPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup_DF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "lookUp_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees": {},
									"Department": {},
									"Lookupsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T19:11:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/lookUp_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Paramerisedpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Parameterised dataflow2",
								"type": "DataFlowReference",
								"parameters": {
									"Department": {
										"value": "'@{pipeline().parameters.dept}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Employee": {},
									"empbydept": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dept": {
						"type": "string",
						"defaultValue": "IT"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T18:49:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Parameterised dataflow2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivotpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Pivot Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Pivot dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employees": {},
									"totalemployees": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T08:30:50Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Pivot dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sortpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "SortData flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Sortdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employees": {},
									"Sortsink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-03T19:25:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Sortdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Suorragate pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Suroggatekey Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sorragatekey_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T16:01:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sorragatekey_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Switch Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.foldername",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "Output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "inputdatadatset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "outputlocationdataset2",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.foldername",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "Output2",
									"activities": [
										{
											"name": "Copy data2",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "BinarySource",
													"storeSettings": {
														"type": "AzureBlobStorageReadSettings",
														"recursive": true
													},
													"formatSettings": {
														"type": "BinaryReadSettings"
													}
												},
												"sink": {
													"type": "BinarySink",
													"storeSettings": {
														"type": "AzureBlobStorageWriteSettings"
													}
												},
												"enableStaging": false
											},
											"inputs": [
												{
													"referenceName": "inputdatadatset",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "outputlocationdataset2",
													"type": "DatasetReference",
													"parameters": {
														"folder": {
															"value": "@pipeline().parameters.foldername",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"foldername": {
						"type": "string",
						"defaultValue": "output1"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T13:17:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatadatset')]",
				"[concat(variables('factoryId'), '/datasets/outputlocationdataset2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Unpivotdatapipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Unpivot Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "unpivot_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"PurchaseOrders": {},
									"UnPivotsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T10:03:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/unpivot_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Until Activiy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@bool(variables('Fileavaliblity'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata1",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "inputdatadatset",
											"type": "DatasetReference",
											"parameters": {}
										},
										"fieldList": [
											"exists"
										],
										"storeSettings": {
											"type": "AzureBlobStorageReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "BinaryReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata1",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@bool(activity('Get Metadata1').output)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 120
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable1",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "Fileavaliblity",
													"value": "True"
												}
											}
										]
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "inputdatadatset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputfolder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Fileavaliblity": {
						"type": "String",
						"defaultValue": "false"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T11:56:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatadatset')]",
				"[concat(variables('factoryId'), '/datasets/outputfolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/chachevariablepipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ds_dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"empdata": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data flow1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Maxsalary",
							"value": {
								"value": "@string(activity('Data flow1').output.runStatus.output.sink1.value[0].MaxSalary)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Maxsalary": {
						"type": "String"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ds_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": null,
									"modifiedDatetimeEnd": null,
									"wildcardFolderPath": "input",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": true
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "AzureBlobStorage1",
										"type": "LinkedServiceReference"
									},
									"path": "keelaadfdemo"
								}
							},
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "ds_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsoutput",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data')]",
				"[concat(variables('factoryId'), '/datasets/dsoutput')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremisistoblobstorage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T18:28:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "inputdatadatset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "outputdatadataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"filepath": {
						"type": "string",
						"defaultValue": "triggerBody().filepath"
					},
					"filename": {
						"type": "string",
						"defaultValue": "triggerBody().filename"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-01T17:11:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatadatset')]",
				"[concat(variables('factoryId'), '/datasets/outputdatadataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.outputfolder",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "inputdatadatset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "demoadfoutput",
											"type": "DatasetReference",
											"parameters": {
												"foldername": {
													"value": "@item()",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"outputfolder": {
						"type": "array",
						"defaultValue": [
							"output1",
							"output2",
							"output3"
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T09:23:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/inputdatadatset')]",
				"[concat(variables('factoryId'), '/datasets/demoadfoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 30
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-05T10:12:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/searchPipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "search-DF",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Search_DF",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employee": {},
									"Department": {},
									"TotalEmployeessink1": {},
									"DeptandempBranch": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T06:56:08Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Search_DF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/selecttrasformationpipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select Data flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Selectdataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Employee": {},
									"selectsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T07:48:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Selectdataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/web Activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Web1",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://dummy.restapiexample.com/api/v1/employees"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-02T12:31:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/window pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Window flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Window dataflow",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"employe": {},
									"Windowsink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-04T17:03:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Window dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SQL Storage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dbo.Company_Destination.txt",
						"folderPath": "input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SQL Storage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DepartmentDatadataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "department.csv",
						"folderPath": "input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DepartmentID",
						"type": "String"
					},
					{
						"name": "DepartmentName",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Employeedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.csv",
						"folderPath": "input",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/HREmployees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "HREmployees.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ITEmployees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "IT Employee.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PayrollEmployees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PayrollEmployees.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Purchasedordersdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "text.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "po ",
						"type": "String"
					},
					{
						"name": "vender",
						"type": "String"
					},
					{
						"name": " Apple ",
						"type": "String"
					},
					{
						"name": "Mango",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SorragateKeydataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee_Soragatekey.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SqlServer",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Sales",
						"type": "money",
						"precision": 19,
						"scale": 4
					},
					{
						"name": "Sales_Desc",
						"type": "varchar"
					},
					{
						"name": "Created_Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "Updated_Date",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "tblemploees1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/SqlServer')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Text')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "text.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "po vender Apple Mango",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/demoadfoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"foldername": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().foldername",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/destination')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmpName",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employee1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employees1.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Gender",
						"type": "String"
					},
					{
						"name": "country",
						"type": "String"
					},
					{
						"name": "Salary",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employeeexistsoutput')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/inputdatadatset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "1-5.txt",
						"folderPath": "input",
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/keelaemployeedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.csv",
						"folderPath": "input",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/keelaoutputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "output",
						"container": "keelaadfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EmployeID",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Country",
						"type": "String"
					},
					{
						"name": "Department",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdatadataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "data.txt",
						"folderPath": "Output",
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "adfdemo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputfolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "Output",
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputlocationDataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"OutputFolder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().OutputFolder",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputlocationdataset2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "linkedservicestoragedemo keela",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().folder",
							"type": "Expression"
						},
						"container": "adfdemo"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/linkedservicestoragedemo keela')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SQL Storage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('SQL Storage_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "on premises to Cloud Storage ",
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('SqlServer_password')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHosedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHosedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"servername": {
						"type": "string"
					},
					"dbName": {
						"type": "string"
					},
					"username": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer1_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer1_properties_typeProperties_userName')]",
					"password": "@{linkedService().password}"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServer2')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('SqlServer2_properties_typeProperties_server')]",
					"database": "[parameters('SqlServer2_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('SqlServer2_properties_typeProperties_userName')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "Sqlkeyvalut",
							"type": "LinkedServiceReference"
						},
						"secretName": "Keelasql-connectingString"
					}
				},
				"connectVia": {
					"referenceName": "SelfHosedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHosedIR')]",
				"[concat(variables('factoryId'), '/linkedServices/Sqlkeyvalut')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sqlkeyvalut')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('Sqlkeyvalut_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedservice_sqlserver')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"dbname": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "SqlServer",
				"typeProperties": {
					"server": "[parameters('linkedservice_sqlserver_properties_typeProperties_server')]",
					"database": "[parameters('linkedservice_sqlserver_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": true,
					"authenticationType": "SQL",
					"userName": "[parameters('linkedservice_sqlserver_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('linkedservice_sqlserver_password')]"
					}
				},
				"connectVia": {
					"referenceName": "SelfHosedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHosedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/linkedservicestoragedemo keela')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('linkedservicestoragedemo keela_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DemoTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Daily schedule trigger",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2025-01-31T14:05:00",
						"endTime": "2025-02-10T14:10:00",
						"timeZone": "India Standard Time",
						"schedule": {
							"minutes": [
								10
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/eventtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "event trigger",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pipeline1",
							"type": "PipelineReference"
						},
						"parameters": {
							"filepath": "[parameters('eventtrigger_properties_pipeline1_parameters_filepath')]",
							"filename": "[parameters('eventtrigger_properties_pipeline1_parameters_filename')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/adfdemo/blobs/input/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('eventtrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tumbling window trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Tumbling  trigger",
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "pipeline1",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 5,
					"startTime": "2025-02-02T09:00:00Z",
					"endTime": "2025-02-03T09:00:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 25,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pipeline1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHosedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ConditionalSplit')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employeedataset",
								"type": "DatasetReference"
							},
							"name": "employeedataset"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "HREmployees"
						},
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "ITEmployees"
						},
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "PayrollEmployees"
						}
					],
					"transformations": [
						{
							"name": "splitbasedonDep"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeedataset",
						"employeedataset split(equals(Department, '1'),",
						"     equals(Department, '2'),",
						"     equals(Department, '3'),",
						"     disjoint: false) ~> splitbasedonDep@(HRemployees, ITemployees, PayrollEmployees)",
						"splitbasedonDep@HRemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['HREmployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> HREmployees",
						"splitbasedonDep@ITemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['IT Employee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ITEmployees",
						"splitbasedonDep@PayrollEmployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PayrollEmployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PayrollEmployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employeedataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFExsits')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "employees"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDatadataset",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "employeeexistsoutput",
								"type": "DatasetReference"
							},
							"name": "output"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"employees, Department exists(Department == DepartmentID,",
						"     negate:true,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepnotexistsEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> output"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDatadataset')]",
				"[concat(variables('factoryId'), '/datasets/employeeexistsoutput')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DFunion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ITEmployees",
								"type": "DatasetReference"
							},
							"name": "ITemployees"
						},
						{
							"dataset": {
								"referenceName": "HREmployees",
								"type": "DatasetReference"
							},
							"name": "HREmployees"
						},
						{
							"dataset": {
								"referenceName": "PayrollEmployees",
								"type": "DatasetReference"
							},
							"name": "PayrollEmployees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "unionallemploye"
						}
					],
					"transformations": [
						{
							"name": "unionallemployees"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ITemployees",
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HREmployees",
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PayrollEmployees",
						"ITemployees, HREmployees, PayrollEmployees union(byName: true)~> unionallemployees",
						"unionallemployees sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['UnionAllEmplyees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> unionallemploye"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ITEmployees')]",
				"[concat(variables('factoryId'), '/datasets/HREmployees')]",
				"[concat(variables('factoryId'), '/datasets/PayrollEmployees')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DerivedColumntransformtion')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employeedataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "Newcountrylist"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as short,",
						"          Name as string,",
						"          Country as string,",
						"          Department as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(Country = upper(Country),",
						"          NewCountry = iif(isNull(Country), 'Unknow', upper(Country))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['NewCountrylist'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Newcountrylist"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employeedataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Filterpayrolemp')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employeedataset",
								"type": "DatasetReference"
							},
							"name": "employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "PayrollEmpdata"
						}
					],
					"transformations": [
						{
							"name": "filterpayrolldept"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"employee filter(equals(Department,'3')) ~> filterpayrolldept",
						"filterpayrolldept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['payrollEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> PayrollEmpdata"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employeedataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Parameterised dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "empbydept"
						}
					],
					"transformations": [
						{
							"name": "filterByDept"
						}
					],
					"scriptLines": [
						"parameters{",
						"     Department as string",
						"}",
						"source(output(",
						"          ID as string,",
						"          Name as string,",
						"          Gender as string,",
						"          country as string,",
						"          Salary as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee filter(Department==$Department) ~> filterByDept",
						"filterByDept sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['empbydept.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> empbydept"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pivot dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "Employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "totalemployees"
						}
					],
					"transformations": [
						{
							"name": "pivotemp"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as short,",
						"          Name as string,",
						"          Country as string,",
						"          Department as short,",
						"          Gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"Employees pivot(groupBy(Department),",
						"     pivotBy(Gender),",
						"     gender = count(EmployeID),",
						"     columnNaming: 'Total_$N$V_Employees',",
						"     lateral: true) ~> pivotemp",
						"pivotemp sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['TotalPivotemployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> totalemployees"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Search_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDatadataset",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "TotalEmployeessink1"
						},
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "DeptandempBranch"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"employee aggregate(groupBy(Department),",
						"     TotalEmployees = count(EmployeID)) ~> aggregate1",
						"employee, Department join(Department == DepartmentID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['aggreagte.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> TotalEmployeessink1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['EmpDep.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeID,",
						"          Name,",
						"          Country,",
						"          Department",
						"     ),",
						"     partitionBy('hash', 1)) ~> DeptandempBranch"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDatadataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Selectdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "Employee"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "selectsink"
						}
					],
					"transformations": [
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employee",
						"Employee select(mapColumn(",
						"          EmpName = Name,",
						"          EmpID = EmployeID,",
						"          Country",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['SelectEmployee.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> selectsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Sortdataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "Sortsink1"
						}
					],
					"transformations": [
						{
							"name": "sortonnames"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employees",
						"employees sort(asc(Name, true),",
						"     caseInsensitive: true) ~> sortonnames",
						"sortonnames sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['sortdataflow.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Sortsink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Totalempbydept')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employeedataset",
								"type": "DatasetReference"
							},
							"name": "employee"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDatadataset",
								"type": "DatasetReference"
							},
							"name": "Departments"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "sink"
						}
					],
					"transformations": [
						{
							"name": "aggregateondept"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employee",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Departments",
						"employee aggregate(groupBy(Department),",
						"     Totalemployees = count(EmployeID)) ~> aggregateondept",
						"aggregateondept, Departments join(Department == DepartmentID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['totalEmpbydeptlatest.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          DepartmentName,",
						"          Totalemployees",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employeedataset')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDatadataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Window dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employee1",
								"type": "DatasetReference"
							},
							"name": "employe"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "Windowsink"
						}
					],
					"transformations": [
						{
							"name": "window1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Gender as string,",
						"          country as string,",
						"          Salary as integer,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employe",
						"employe window(over(Department),",
						"     desc(Salary, true),",
						"     AvgSalary = avg(Salary),",
						"          DenseRank = denseRank()) ~> window1",
						"window1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['Windowemployees.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Windowsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employee1')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Employeedataset",
								"type": "DatasetReference"
							},
							"name": "employeeDataset"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDatadataset",
								"type": "DatasetReference"
							},
							"name": "DepartmentDataSet"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputdataset",
								"type": "DatasetReference"
							},
							"name": "OutputData",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "joinEmpdatadeptdata"
						},
						{
							"name": "ModifyColumns1",
							"description": "Autogenerated by data preview actions"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> employeeDataset",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DepartmentDataSet",
						"employeeDataset, DepartmentDataSet join(Department == DepartmentID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinEmpdatadeptdata",
						"joinEmpdatadeptdata derive(Country = upper(Country)) ~> ModifyColumns1",
						"ModifyColumns1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['empanddeptdata'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          EmployeID,",
						"          EmpName = Name,",
						"          Country,",
						"          DepartmentName",
						"     ),",
						"     partitionBy('hash', 1)) ~> OutputData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Employeedataset')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDatadataset')]",
				"[concat(variables('factoryId'), '/datasets/outputdataset')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_data",
								"type": "DatasetReference"
							},
							"name": "empdata"
						}
					],
					"sinks": [
						{
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmpName as string,",
						"          Gender as string,",
						"          Country as string,",
						"          Salary as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> empdata",
						"empdata aggregate(MaxSalary = max(toInteger(Salary))) ~> aggregate1",
						"aggregate1 sink(validateSchema: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     store: 'cache',",
						"     format: 'inline',",
						"     output: true,",
						"     saveOrder: 1) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lookUp_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "keelaemployeedataset",
								"type": "DatasetReference"
							},
							"name": "Employees"
						},
						{
							"dataset": {
								"referenceName": "DepartmentDatadataset",
								"type": "DatasetReference"
							},
							"name": "Department"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "Lookupsink"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Employees",
						"source(output(",
						"          DepartmentID as string,",
						"          DepartmentName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Department",
						"Employees, Department lookup(Department == DepartmentID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['LookResulytemp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Lookupsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/keelaemployeedataset')]",
				"[concat(variables('factoryId'), '/datasets/DepartmentDatadataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sorragatekey_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SorragateKeydataset",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "surrogateKey1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 keyGenerate(output(EmpKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 select(mapColumn(",
						"          EmpKey,",
						"          Name = name,",
						"          Country,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['surragatekeyoutputEmp.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SorragateKeydataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/unpivot_DF')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Purchasedordersdataset",
								"type": "DatasetReference"
							},
							"name": "PurchaseOrders"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "keelaoutputdataset",
								"type": "DatasetReference"
							},
							"name": "UnPivotsink"
						}
					],
					"transformations": [
						{
							"name": "unpivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {po } as string,",
						"          vender as string,",
						"          { Apple } as string,",
						"          Mango as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PurchaseOrders",
						"PurchaseOrders unpivot(output(",
						"          FRUITS as string,",
						"          Amount as string",
						"     ),",
						"     ungroupBy({po },",
						"          vender),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> unpivot1",
						"unpivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EmployeID as string,",
						"          Name as string,",
						"          Country as string,",
						"          Department as string",
						"     ),",
						"     partitionFileNames:['unpivot.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> UnPivotsink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Purchasedordersdataset')]",
				"[concat(variables('factoryId'), '/datasets/keelaoutputdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline4')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"AbsoluteUrl": "$.next"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".Csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"path": "[['name']"
										},
										"sink": {
											"name": "name"
										}
									},
									{
										"source": {
											"path": "[['url']"
										},
										"sink": {
											"name": "url"
										}
									}
								],
								"collectionReference": "$['results']"
							}
						},
						"inputs": [
							{
								"referenceName": "RestResource1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dsoutput1",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RestResource1')]",
				"[concat(variables('factoryId'), '/datasets/dsoutput1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService1_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dsoutput1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "apidata.csv",
						"folderPath": "input",
						"fileSystem": "keelademo"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		}
	]
}