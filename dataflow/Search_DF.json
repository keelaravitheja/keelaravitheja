{
	"name": "Search_DF",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "keelaemployeedataset",
						"type": "DatasetReference"
					},
					"name": "employee"
				},
				{
					"dataset": {
						"referenceName": "DepartmentDatadataset",
						"type": "DatasetReference"
					},
					"name": "Department"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "keelaoutputdataset",
						"type": "DatasetReference"
					},
					"name": "TotalEmployeessink1"
				},
				{
					"dataset": {
						"referenceName": "keelaoutputdataset",
						"type": "DatasetReference"
					},
					"name": "DeptandempBranch"
				}
			],
			"transformations": [
				{
					"name": "aggregate1"
				},
				{
					"name": "join1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeID as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> employee",
				"source(output(",
				"          DepartmentID as string,",
				"          DepartmentName as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Department",
				"employee aggregate(groupBy(Department),",
				"     TotalEmployees = count(EmployeID)) ~> aggregate1",
				"employee, Department join(Department == DepartmentID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeID as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     partitionFileNames:['aggreagte.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> TotalEmployeessink1",
				"join1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeID as string,",
				"          Name as string,",
				"          Country as string,",
				"          Department as string",
				"     ),",
				"     partitionFileNames:['EmpDep.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EmployeID,",
				"          Name,",
				"          Country,",
				"          Department",
				"     ),",
				"     partitionBy('hash', 1)) ~> DeptandempBranch"
			]
		}
	}
}